// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: stillepost.proto

package stillepost_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StillepostMemberClient is the client API for StillepostMember service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StillepostMemberClient interface {
	GetPeerEndpoint(ctx context.Context, in *GetPeerEndpointParams, opts ...grpc.CallOption) (*GetPeerEndpointResult, error)
	ConfigureMember(ctx context.Context, in *MemberConfiguration, opts ...grpc.CallOption) (*MemberConfigurationResult, error)
	ConfigureRundgang(ctx context.Context, in *RundgangConfiguration, opts ...grpc.CallOption) (*RundgangConfigurationResult, error)
	Stillepost(ctx context.Context, in *StillepostCoordinatorParams, opts ...grpc.CallOption) (*StillepostOriginResult, error)
}

type stillepostMemberClient struct {
	cc grpc.ClientConnInterface
}

func NewStillepostMemberClient(cc grpc.ClientConnInterface) StillepostMemberClient {
	return &stillepostMemberClient{cc}
}

func (c *stillepostMemberClient) GetPeerEndpoint(ctx context.Context, in *GetPeerEndpointParams, opts ...grpc.CallOption) (*GetPeerEndpointResult, error) {
	out := new(GetPeerEndpointResult)
	err := c.cc.Invoke(ctx, "/StillepostMember/GetPeerEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stillepostMemberClient) ConfigureMember(ctx context.Context, in *MemberConfiguration, opts ...grpc.CallOption) (*MemberConfigurationResult, error) {
	out := new(MemberConfigurationResult)
	err := c.cc.Invoke(ctx, "/StillepostMember/ConfigureMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stillepostMemberClient) ConfigureRundgang(ctx context.Context, in *RundgangConfiguration, opts ...grpc.CallOption) (*RundgangConfigurationResult, error) {
	out := new(RundgangConfigurationResult)
	err := c.cc.Invoke(ctx, "/StillepostMember/ConfigureRundgang", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stillepostMemberClient) Stillepost(ctx context.Context, in *StillepostCoordinatorParams, opts ...grpc.CallOption) (*StillepostOriginResult, error) {
	out := new(StillepostOriginResult)
	err := c.cc.Invoke(ctx, "/StillepostMember/Stillepost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StillepostMemberServer is the server API for StillepostMember service.
// All implementations must embed UnimplementedStillepostMemberServer
// for forward compatibility
type StillepostMemberServer interface {
	GetPeerEndpoint(context.Context, *GetPeerEndpointParams) (*GetPeerEndpointResult, error)
	ConfigureMember(context.Context, *MemberConfiguration) (*MemberConfigurationResult, error)
	ConfigureRundgang(context.Context, *RundgangConfiguration) (*RundgangConfigurationResult, error)
	Stillepost(context.Context, *StillepostCoordinatorParams) (*StillepostOriginResult, error)
	mustEmbedUnimplementedStillepostMemberServer()
}

// UnimplementedStillepostMemberServer must be embedded to have forward compatible implementations.
type UnimplementedStillepostMemberServer struct {
}

func (UnimplementedStillepostMemberServer) GetPeerEndpoint(context.Context, *GetPeerEndpointParams) (*GetPeerEndpointResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerEndpoint not implemented")
}
func (UnimplementedStillepostMemberServer) ConfigureMember(context.Context, *MemberConfiguration) (*MemberConfigurationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureMember not implemented")
}
func (UnimplementedStillepostMemberServer) ConfigureRundgang(context.Context, *RundgangConfiguration) (*RundgangConfigurationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureRundgang not implemented")
}
func (UnimplementedStillepostMemberServer) Stillepost(context.Context, *StillepostCoordinatorParams) (*StillepostOriginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stillepost not implemented")
}
func (UnimplementedStillepostMemberServer) mustEmbedUnimplementedStillepostMemberServer() {}

// UnsafeStillepostMemberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StillepostMemberServer will
// result in compilation errors.
type UnsafeStillepostMemberServer interface {
	mustEmbedUnimplementedStillepostMemberServer()
}

func RegisterStillepostMemberServer(s grpc.ServiceRegistrar, srv StillepostMemberServer) {
	s.RegisterService(&StillepostMember_ServiceDesc, srv)
}

func _StillepostMember_GetPeerEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerEndpointParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StillepostMemberServer).GetPeerEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StillepostMember/GetPeerEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StillepostMemberServer).GetPeerEndpoint(ctx, req.(*GetPeerEndpointParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _StillepostMember_ConfigureMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StillepostMemberServer).ConfigureMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StillepostMember/ConfigureMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StillepostMemberServer).ConfigureMember(ctx, req.(*MemberConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _StillepostMember_ConfigureRundgang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RundgangConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StillepostMemberServer).ConfigureRundgang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StillepostMember/ConfigureRundgang",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StillepostMemberServer).ConfigureRundgang(ctx, req.(*RundgangConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _StillepostMember_Stillepost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StillepostCoordinatorParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StillepostMemberServer).Stillepost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StillepostMember/Stillepost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StillepostMemberServer).Stillepost(ctx, req.(*StillepostCoordinatorParams))
	}
	return interceptor(ctx, in, info, handler)
}

// StillepostMember_ServiceDesc is the grpc.ServiceDesc for StillepostMember service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StillepostMember_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StillepostMember",
	HandlerType: (*StillepostMemberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeerEndpoint",
			Handler:    _StillepostMember_GetPeerEndpoint_Handler,
		},
		{
			MethodName: "ConfigureMember",
			Handler:    _StillepostMember_ConfigureMember_Handler,
		},
		{
			MethodName: "ConfigureRundgang",
			Handler:    _StillepostMember_ConfigureRundgang_Handler,
		},
		{
			MethodName: "Stillepost",
			Handler:    _StillepostMember_Stillepost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stillepost.proto",
}

// StillepostCoordinatorClient is the client API for StillepostCoordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StillepostCoordinatorClient interface {
	ConfigureRing(ctx context.Context, in *ClientRingConfiguration, opts ...grpc.CallOption) (*ClientRingConfigurationResult, error)
	Stillepost(ctx context.Context, in *StillepostClientParams, opts ...grpc.CallOption) (*StillepostResult, error)
	PingAllSystems(ctx context.Context, in *ClientPingParams, opts ...grpc.CallOption) (*ClientPingResult, error)
}

type stillepostCoordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewStillepostCoordinatorClient(cc grpc.ClientConnInterface) StillepostCoordinatorClient {
	return &stillepostCoordinatorClient{cc}
}

func (c *stillepostCoordinatorClient) ConfigureRing(ctx context.Context, in *ClientRingConfiguration, opts ...grpc.CallOption) (*ClientRingConfigurationResult, error) {
	out := new(ClientRingConfigurationResult)
	err := c.cc.Invoke(ctx, "/StillepostCoordinator/ConfigureRing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stillepostCoordinatorClient) Stillepost(ctx context.Context, in *StillepostClientParams, opts ...grpc.CallOption) (*StillepostResult, error) {
	out := new(StillepostResult)
	err := c.cc.Invoke(ctx, "/StillepostCoordinator/Stillepost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stillepostCoordinatorClient) PingAllSystems(ctx context.Context, in *ClientPingParams, opts ...grpc.CallOption) (*ClientPingResult, error) {
	out := new(ClientPingResult)
	err := c.cc.Invoke(ctx, "/StillepostCoordinator/PingAllSystems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StillepostCoordinatorServer is the server API for StillepostCoordinator service.
// All implementations must embed UnimplementedStillepostCoordinatorServer
// for forward compatibility
type StillepostCoordinatorServer interface {
	ConfigureRing(context.Context, *ClientRingConfiguration) (*ClientRingConfigurationResult, error)
	Stillepost(context.Context, *StillepostClientParams) (*StillepostResult, error)
	PingAllSystems(context.Context, *ClientPingParams) (*ClientPingResult, error)
	mustEmbedUnimplementedStillepostCoordinatorServer()
}

// UnimplementedStillepostCoordinatorServer must be embedded to have forward compatible implementations.
type UnimplementedStillepostCoordinatorServer struct {
}

func (UnimplementedStillepostCoordinatorServer) ConfigureRing(context.Context, *ClientRingConfiguration) (*ClientRingConfigurationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureRing not implemented")
}
func (UnimplementedStillepostCoordinatorServer) Stillepost(context.Context, *StillepostClientParams) (*StillepostResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stillepost not implemented")
}
func (UnimplementedStillepostCoordinatorServer) PingAllSystems(context.Context, *ClientPingParams) (*ClientPingResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingAllSystems not implemented")
}
func (UnimplementedStillepostCoordinatorServer) mustEmbedUnimplementedStillepostCoordinatorServer() {}

// UnsafeStillepostCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StillepostCoordinatorServer will
// result in compilation errors.
type UnsafeStillepostCoordinatorServer interface {
	mustEmbedUnimplementedStillepostCoordinatorServer()
}

func RegisterStillepostCoordinatorServer(s grpc.ServiceRegistrar, srv StillepostCoordinatorServer) {
	s.RegisterService(&StillepostCoordinator_ServiceDesc, srv)
}

func _StillepostCoordinator_ConfigureRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRingConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StillepostCoordinatorServer).ConfigureRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StillepostCoordinator/ConfigureRing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StillepostCoordinatorServer).ConfigureRing(ctx, req.(*ClientRingConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _StillepostCoordinator_Stillepost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StillepostClientParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StillepostCoordinatorServer).Stillepost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StillepostCoordinator/Stillepost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StillepostCoordinatorServer).Stillepost(ctx, req.(*StillepostClientParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _StillepostCoordinator_PingAllSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientPingParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StillepostCoordinatorServer).PingAllSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StillepostCoordinator/PingAllSystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StillepostCoordinatorServer).PingAllSystems(ctx, req.(*ClientPingParams))
	}
	return interceptor(ctx, in, info, handler)
}

// StillepostCoordinator_ServiceDesc is the grpc.ServiceDesc for StillepostCoordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StillepostCoordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StillepostCoordinator",
	HandlerType: (*StillepostCoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureRing",
			Handler:    _StillepostCoordinator_ConfigureRing_Handler,
		},
		{
			MethodName: "Stillepost",
			Handler:    _StillepostCoordinator_Stillepost_Handler,
		},
		{
			MethodName: "PingAllSystems",
			Handler:    _StillepostCoordinator_PingAllSystems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stillepost.proto",
}
